// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String   @unique
  password  String?
  googleId  String?   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products   Product[]
  reviews   Review[]
  refreshTokens  RefreshToken[]
}

model Category {  
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products   Product[]
}

model Product { 
  id        String      @id @default(uuid())
  name      String
  description String
  price     Float
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId      String?
  user      User?   @relation(fields: [userId], references: [id]) 
  categoryId  String?
  category  Category? @relation(fields: [categoryId], references: [id]) 
  images    Image[]
  reviews   Review[]
}

model Image {
  id        String      @id @default(uuid())
  path      String
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String      @id @default(uuid())
  rating    Int
  comment   String?
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model RefreshToken {
  id        String      @id @default(uuid())
  token       String   @unique
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  expiresAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}